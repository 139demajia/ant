import "@ant.general"
import "@ant.scene"
import "@ant.camera"

system "blit_render_system"
    .implement "render_system.lua"
    .require_policy "blit_queue"
    .require_policy "ant.general|name"

system "render_system"
    .implement "render_system.lua"
    .require_system "ant.scene|scenespace_system"
    .require_system "ant.render|cull_system"
    .require_system "end_frame_system"
    .require_system "viewport_detect_system"
    .require_policy "render_queue"
    .require_policy "main_queue"
    .require_policy "ant.camera|camera"
    .require_policy "ant.general|name"
    .require_interface "system_properties"
    .method "init"
    .method "render_commit"

system "cull_system"
    .implement "cull_system.lua"
    .require_system "ant.scene|scenespace_system"
    .method "cull"

system "end_frame_system"
    .implement "end_frame_system.lua"
    .method "end_frame"

transform "visible_primitive_transform"
    .implement "render.lua"
    .input "primitive_filter"
    .output "primitive_filter.visible"
    .method "process_entity"

policy "blit_queue"
    .require_transform "visible_primitive_transform"
    .unique_component "blit_queue"

policy "main_queue"
    .require_transform "visible_primitive_transform"
    .unique_component "main_queue"

policy "orthoview_queue"
    .require_transform "visible_primitive_transform"
    .component "orthoview"

policy "view_queue"
    .require_transform "visible_primitive_transform"
    .component "view_queue"

transform "render_transform"
    .implement "render_system.lua"
    .require_transform "ant.general|rendercache_transform"
    .require_transform "ant.asset|material_transform"
    .require_transform "ant.asset|mesh_transform"
    .require_transform "ant.general|init_transform"
    .input "_cache_prefab.material"
    .input "_cache_prefab.mesh"
    .input "_rendercache.transform"
    .output "_rendercache.render"
    .method "process_entity"

policy "render"
    .require_system "render_system"
    .require_interface "ant.scene|ientity_state"
    .require_interface "ant.render|irender"
    .require_transform "ant.render|render_transform"
    .require_transform "ant.scene|entity_state_transform"
    .component "state"
    .component "material"
    .component "transform"
    .component "scene_entity"
    .component "mesh"



policy "render_queue"
    .component "render_target"
    .component "camera_eid"
    .component "primitive_filter"
    .component "visible"

component "render_target"
    .implement "render_system.lua"
    .method "init"
    .method "delete"

interface "irender"
    .implement "render.lua"
    .method "draw"
    .method "create_main_queue"
    .method "create_blit_queue"
    .method "create_orthoview_queue"
    .method "create_view_queue"
    .method "get_main_view_rendertexture"
    .method "set_view_frame_buffer"
    .method "screen_capture"
    .method "read_render_buffer_content"

interface "irenderqueue"
    .implement "render.lua"
    .method "clear_state"
    .method "view_rect"
    .method "frame_buffer"
    .method "camera"
    .method "visible"
    .method "main_camera"
    .method "set_view_clear"
    .method "set_view_clear_state"
    .method "set_view_clear_color"
    .method "set_view_clear_depth"
    .method "set_view_clear_stencil"
    .method "set_view_rect"
    .method "set_frame_buffer"
    .method "set_camera"
    .method "set_visible"
    .method "update_rendertarget"

interface "entity"
    .implement "components/entity.lua"
    .method "create_mesh"
    .method "create_grid_entity"
    .method "create_plane_entity"
    .method "quad_mesh"
    .method "fullquad_mesh"
    .method "create_quad_entity"
    .method "create_texture_quad_entity"
    .method "create_frustum_entity"
    .method "create_axis_entity"
    .method "create_skybox"
    .method "create_procedural_sky"
    .method "entity_bounding"
    .method "create_circle_entity"
    .method "create_line_entity"
    .method "create_prim_plane_entity"
    .method "create_circle_mesh_entity"
    
pipeline "render"
    .stage "refine_filter"
    .stage "cull"
    .stage "refine_camera"
    .stage "render_commit"
    .pipeline "postprocess"