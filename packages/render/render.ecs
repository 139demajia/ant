import "@ant.general"
import "@ant.math"
import "@ant.scene"

system "blit_render_system"
    .implement "render.lua"
    .require_policy "blit_queue"
    .require_policy "blitrender"
    .require_policy "ant.general|name"
    .method "init_blit_render"

system "render_system"
    .implement "render.lua"
    .require_system "ant.scene|primitive_filter_system"
    .require_system "ant.scene|scenespace_system"
    .require_system "ant.scene|cull_system"
    .require_system "load_properties_system"
    .require_system "end_frame_system"
    .require_system "viewport_detect_system"
    .require_system "blit_render_system"
    .require_policy "render_queue"
    .require_policy "main_queue"
    .require_policy "camera"
    .require_policy "ant.general|name"
    .require_interface "render_properties"
    .method "init"
    .method "render_commit"

policy "blit_queue"
    .unique_component "blit_queue"

policy "blitrender"
    .require_system "render_system"
    .require_policy "ant.scene|transform_policy"
    .require_component "blit_render"
    .require_component "rendermesh"
    .require_component "material"
    .require_component "transform"
    .require_component "scene_entity"

policy "camera"
    .require_component "camera"

policy "main_queue"
    .unique_component "main_queue"

policy "mesh"
    .require_transform "mesh_loader"
    .require_component "rendermesh"
    .require_component "mesh"

policy "render"
    .require_system "render_system"
    .require_policy "ant.scene|transform_policy"
    .require_component "can_render"
    .require_component "rendermesh"
    .require_component "material"
    .require_component "transform"
    .require_component "scene_entity"

policy "render_queue"
    .require_component "render_target"
    .require_component "camera_eid"
    .require_component "primitive_filter"
    .require_component "visible"

transform "camera_transfrom"
    .implement "render.lua"
    .output "camera"
    .method "process"

transform "mesh_loader"
    .implement "render.lua"
    .input "mesh"
    .output "rendermesh"
    .method "process"

component "blit_queue"
    .implement "render.lua"

component "blit_render"
    .implement "render.lua"

component "camera"
    .implement "render.lua"
    .require_component "vector"
    .require_component "vector"
    .require_component "vector"
    .require_component "frustum"
    .require_component "lock_target"

component "camera_eid"
    .implement "render.lua"

component "can_render"
    .implement "render.lua"

component "clear_state"
    .implement "render.lua"

component "fb_index"
    .implement "render.lua"

component "main_queue"
    .implement "render.lua"

component "material"
    .require_component "resource"
    .implement "render.lua"

component "mesh"
    .require_component "resource"
    .implement "render.lua"

component "rb_index"
    .implement "render.lua"

component "rect"
    .implement "render.lua"

component "render_target"
    .implement "render.lua"
    .require_component "viewport"
    .require_component "fb_index"
    .require_component "viewid"
    .require_component "view_mode"
    .method "init"
    .method "delete"

component "rendermesh"
    .implement "render.lua"

component "view_mode"
    .implement "render.lua"

component "viewid"
    .implement "render.lua"

component "viewport"
    .implement "render.lua"
    .require_component "clear_state"
    .require_component "rect"

component "visible"
    .implement "render.lua"

pipeline "render"
    .stage "load_render_properties"
    .pipeline "handle_primitive"
    .stage "cull"
    .stage "render_commit"
    .pipeline "postprocess"