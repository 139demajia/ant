import "@ant.general"
import "@ant.scene"
import "@ant.camera"
import "@ant.asset"
import "@ant.render.ibl"

component "blit_queue"
policy "blit_queue"
    .component "blit_queue"

component "pre_depth_queue"
policy "pre_depth_queue"
    .require_system  "pre_depth_primitive_system"
    .component   "pre_depth_queue"

component "main_queue"
policy "main_queue"
    .component "main_queue"

component "orthoview".type "lua"
policy "orthoview_queue"
    .component "orthoview"

component "view_queue"
policy "view_queue"
    .component "view_queue"

system "world_transform_system"
    .implement "render_system/render.lua"
    .method "entity_init"

policy "render_object"
    .component_opt "render_object"
    .component_opt "filter_material"

component "render_object_update"
component "render_object"
    .type "lua"
component "filter_material"
    .type "lua"

policy "render"
    .require_policy "ant.render|render_object"
    .require_policy "ant.scene|scene_object"
    .require_system "ant.render|render_system"
    .require_system "ant.render|world_transform_system"
    .require_interface "ant.scene|ientity_state"
    .require_interface "ant.render|irender"
    .component "mesh"
    .component "material"
    .component "state"

policy "simplerender"
    .require_policy "ant.render|render_object"
    .require_policy "ant.scene|scene_object"
    .require_system "ant.render|render_system"
    .require_system "ant.render|world_transform_system"
    .require_interface "ant.scene|ientity_state"
    .require_interface "ant.render|irender"
	.component "simplemesh"
	.component "material"
    .component "state"

component "watch_screen_buffer"
policy "watch_screen_buffer"
    .component "watch_screen_buffer"
    .component "render_target"

system "render_target_system"
    .implement "render_system/renderqueue.lua"
    .method "entity_init"
    .method "entity_remove"

component "render_target".type "lua"
    .require_system "ant.render|render_target_system"

policy "render_pipeline"
    .require_policy "ant.render|forward_render"
    .require_policy "ant.render|cluster_render"
    .require_policy "ant.render|postprocess"

component "shadow_render_queue"
    .type "lua"

component "filter_result".type "lua"
component "filter_created"
component "visible"
component "camera_ref".type "lua"
component "camera_changed"
component "queue_name".type "lua"
component "primitive_filter".type "lua"
policy "render_queue"
    .require_policy "ant.render|render_pipeline"
    .component "render_target"
    .component "visible"
    .component "queue_name"
    .component "camera_ref"
    .component "primitive_filter"
    .component "shadow_render_queue"

component "need_touch"

component "cull_tag".type "lua"
policy "cull"
    .require_system "cull_system"
    .component "cull_tag"

policy "render_target"
    .component "render_target"

system "end_filter_system"
    .implement "render_system/render_system.lua"
    .method "end_filter"

system "render_system"
    .implement "render_system/render_system.lua"
    .require_system "end_filter_system"
    .require_system "ant.scene|scenespace_system"
    .require_system "ant.render|cull_system"
    .require_system "start_frame_system"
    .require_system "viewport_detect_system"
    .require_interface "ant.render|isystem_properties"
    .method "component_init"
    .method "entity_init"
    .method "commit_system_properties"
    .method "update_filter"
    .method "render_submit"


system "cull_system"
    .implement "cull_system.lua"
    .require_system "ant.scene|scenespace_system"
    .method "entity_ready"
    .method "cull"

interface "icull_primitive"
    .implement "cull_system.lua"
    .method "cull"

system "start_frame_system"
    .implement "frame_system.lua"
    .method "start_frame"

system "pre_depth_primitive_system"
    .implement "render_system/pre_depth.lua"
    .require_system "end_filter_system"
    .require_interface "ant.render|irender"
    .method     "init"
    .method     "end_filter"

interface "irender"
    .implement "render_system/render.lua"
    .method "draw"
    .method "layer_names"
    .method "create_pre_depth_queue"
    .method "create_main_queue"
    .method "create_view_queue"
    .method "get_main_view_rendertexture"
    .method "set_view_frame_buffer"
    .method "screen_capture"
    .method "read_render_buffer_content"
    .method "quad_ib"
    .method "quad_ib_num"
    .method "check_primitive_mode_state"

interface "irenderqueue"
    .implement "render_system/renderqueue.lua"
    .require_interface "ant.camera|camera"
    .method "viewid"
    .method "clear_state"
    .method "view_rect"
    .method "frame_buffer"
    .method "camera"
    .method "visible"
    .method "main_camera"
    .method "set_view_clear"
    .method "set_view_clear_state"
    .method "set_view_clear_color"
    .method "set_view_clear_depth"
    .method "set_view_clear_stencil"
    .method "set_view_rect"
    .method "set_frame_buffer"
    .method "set_camera"
    .method "set_visible"
    .method "update_rendertarget"

interface "entity"
    .implement "components/entity.lua"
    .method "create_mesh"
    .method "create_grid_entity_simple"
    .method "create_grid_entity"
    .method "plane_mesh"
    .method "quad_mesh"
    .method "fullquad_mesh"
    .method "create_quad_entity"
    .method "create_frustum_entity"
    .method "create_axis_entity"
    .method "create_skybox"
    .method "create_procedural_sky"
    .method "create_circle_entity"
    .method "create_line_entity"
    .method "create_prim_plane_entity"
    .method "create_grid_mesh_entity"
    .method "create_circle_mesh_entity"
    .method "create_gamma_test_entity"
    .method "create_simple_render_entity"
    .method "create_arrow_entity"


interface "isystem_properties"
    .implement "render_system/system_properties.lua"
    .require_interface "ant.render.ibl|iibl"
    .method "get"
    .method "properties"
    .method "update"
    .method "update_lighting_properties"
    .method "enable_ibl"

import "render_system/forward_render.ecs"
import "render_system/cluster_render.ecs"

pipeline "render"
    .stage "skin_mesh"
    .stage "refine_filter"
    .stage "cull"
    .stage "refine_camera"
    .pipeline "render_process"
    .pipeline "postprocess"