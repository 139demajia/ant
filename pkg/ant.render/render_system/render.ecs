import "@ant.asset"
import_feature "ant.camera"
import_feature "ant.scene"

import "render_system/depth/depth.ecs"
import "render_system/hitch.ecs"

component "main_queue"

policy "main_queue"
    .include_policy "ant.render|render_queue"
    .component "main_queue"

policy "render_object"
    .require_system "ant.render|render_system"
    .component_opt "render_object"
    .component_opt "filter_material"

component "render_args"
    .type "c"
    .field "viewid:word"
    .field "queue_mask:int64"
    .field "material_index:byte"

component "render_object_visible"   -- view_visible & render_object

component "render_object"
    .type "c"
    .field "worldmat:userdata|math_t"
    --materials
    .field "rm_idx:dword"
    --visible
    .field "visible_masks:int64"  -- determiate which queue can see the render_object(main_view/cast_shadow/selectable, etc ...)
    .field "cull_masks:int64"

    --mesh
    .field "vb_start:dword"
    .field "vb_num:dword"
    .field "vb_handle:dword"

    .field "vb2_start:dword"
    .field "vb2_num:dword"
    .field "vb2_handle:dword"

    .field "ib_start:dword"
    .field "ib_num:dword"
    .field "ib_handle:dword"

    .field "idb_handle:dword"
    .field "itb_handle:dword"
    .field "draw_num:dword"

    .field "render_layer:dword"
    .field "discard_flags:byte"

    .implement "render_system/render_object.lua"

component "filter_material".type "lua"
component "visible"

policy "render"
    .include_policy "ant.render|render_object"
    .include_policy "ant.scene|scene_object"
    .include_policy "ant.scene|bounding"
    .require_system "ant.render|render_layer_system"
    .require_system "ant.render|render_system"
    .require_system "ant.render|visible_state_system"
    .include_policy "ant.asset|material"
    .require_system "ant.asset|mesh_system"
    .component_opt "render_layer"
    .component "mesh"
    .component "visible_state"


system "skinning_system"
    .implement "render_system/skinning_system.lua"

component "cs_skinning_ready"
system "cs_skinning_system"
    .implement "render_system/cs_skinning_system.lua"

component "skinning"
component "skinning_builder"
component "skininfo".type "lua"

policy "skinrender"
    .include_policy "ant.render|render_object"
    .include_policy "ant.scene|bounding"
    .require_system "ant.render|render_system"
    .require_system "ant.render|render_layer_system"
    .require_system "ant.render|skinning_system"
    .require_system "ant.render|cs_skinning_system"
    .require_system "ant.render|visible_state_system"
    .include_policy "ant.asset|material"
    .require_system "ant.asset|mesh_system"
    .component_opt "skinning"
    .component_opt "render_layer"
    .component_opt "skininfo"
    .component "mesh"
    .component "visible_state"

policy "simplerender"
    .include_policy "ant.render|render_object"
    .include_policy "ant.scene|scene_object"
    .include_policy "ant.scene|bounding"
    .include_policy "ant.asset|material"
    .require_system "ant.render|render_system"
    .require_system "ant.render|render_layer_system"
    .require_system "ant.render|visible_state_system"
    .require_system "ant.asset|mesh_system"
    .component "simplemesh"
    .component_opt "owned_mesh_buffer"
    .component_opt "render_layer"
    .component "visible_state"

component "watch_screen_buffer"
policy "watch_screen_buffer"
    .include_policy "ant.render|render_target"
    .component "watch_screen_buffer"

system "render_target_system"
    .implement "render_system/renderqueue.lua"

component "render_target"
    .type "lua"

policy "render_pipeline"
    .include_policy "ant.render|forward_render"
    .include_policy "ant.render|cluster_render"
    .include_policy "ant.render|preprocess"
    .include_policy "ant.render|postprocess"

component "postprocess_obj"
component "filter_result".type "lua"
component "camera_ref".type "int64"
component "camera_changed"
component "queue_name".type "lua"
policy "render_queue"
    .include_policy "ant.render|render_pipeline"
    .include_policy "ant.render|render_target"
    .component "visible"
    .component "queue_name"
    .component "camera_ref"

component "need_touch"

component "cull_args"
    .type "c"
    .field "frustum_planes:userdata|math_t"
    .field "cull_mask:int64"

policy "cull"
    .require_system "ant.render|cull_system"

policy "render_target"
    .require_system "ant.render|render_target_system"
    .component "render_target"

system "submit_render_system"
    .implement ":system.render"

system "render_system"
    .implement "render_system/render_system.lua"
    .require_system "ant.render|submit_render_system"
    .require_system "ant.render|cull_system"
    .require_system "ant.render|viewgroup_system"
    .require_system "ant.render|viewport_detect_system"
    .require_system "ant.render|ibl_system"

policy "indirect"
    .component "indirect"

component "indirect".type "lua"

policy "draw_indirect"
    .component "draw_indirect"

policy "draw_indirect_cull"
    .component "draw_indirect_cull"

policy "draw_indirect_queue"
    .component "draw_indirect_queue"

component "draw_indirect".type "lua"
component "draw_indirect_cull".type "lua"
component "draw_indirect_queue".type "lua"
component "draw_indirect_ready"
component "draw_indirect_update"

system "draw_indirect_system"
    .implement "draw_indirect_system.lua"
    .require_system "ant.render|draw_indirect_system"

system "cull_system"
    .implement "cull_system.lua"
    .require_system "ant.render|viewgroup_system"

import "render_system/forward_render.ecs"
import "render_system/cluster_render.ecs"

pipeline "render"
    .stage "skin_mesh"
    .stage "refine_filter"
    .stage "cull"
    .stage "refine_camera"
    .stage "stone_mountain"
    .pipeline "preprocess"
    .pipeline "render_process"
    .pipeline "postprocess"

component "view_visible"
system "viewgroup_system"
    .implement "render_system/render_system.lua"